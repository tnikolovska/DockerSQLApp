services:
  dockersqlapp:
    build:
      context: D:\DockerSqlApp
      dockerfile: D:/DockerSqlApp/DockerSqlApp/Dockerfile
    command:
    - npm
    - run
    - debug
    depends_on:
      sqlserverdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: https://+:443;http://+:80
      CONNECTIONSTRING: sqlserverdb://sqlserverdb:1450/Films
      SERVER_PORT: "8000"
    image: dockersqlapp
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 443
      protocol: tcp
    - mode: ingress
      target: 8000
      published: 8000
      protocol: tcp
    volumes:
    - type: bind
      source: D:\DockerSqlApp
      target: /app
      bind:
        create_host_path: true
    - type: bind
      source: C:\Users\nikol\AppData\Roaming/ASP.NET/Https
      target: /root/.aspnet/https
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: C:\Users\nikol\AppData\Roaming/Microsoft/UserSecrets
      target: /root/.microsoft/usersecrets
      read_only: true
      bind:
        create_host_path: true
  sqlserverdb:
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: 2Secure*Password2
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 1433
      published: 1450
      protocol: tcp
    volumes:
    - type: volume
      source: sqldb
      target: /data/db
      volume: {}
    - type: volume
      source: sqldb_config
      target: /data/configdb
      volume: {}
networks:
  default:
    name: dockercompose12403523600262110218_default
volumes:
  sqldb:
    name: dockercompose12403523600262110218_sqldb
  sqldb_config:
    name: dockercompose12403523600262110218_sqldb_config